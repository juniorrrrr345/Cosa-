import { NextRequest, NextResponse } from 'next/server';
import mongoService from '@/services/mongoService';

// AUCUNE CAT√âGORIE STATIQUE - BOUTIQUE VIDE PAR D√âFAUT

export async function GET(request: NextRequest) {
  try {
    console.log('üîç API GET /categories - MongoDB seulement');
    
    const categories = await mongoService.getCategories();
    console.log('üì¶ MongoDB cat√©gories:', categories ? categories.length : 'null');
    
    // Si MongoDB est vide, retourner une liste vide (pas de cat√©gories statiques)
    if (!categories || categories.length === 0) {
      console.log('üì¶ MongoDB vide, retour liste vide');
      return NextResponse.json([]);
    }
    
    return NextResponse.json(categories);
  } catch (error) {
    console.error('‚ùå Erreur MongoDB:', error);
    console.log('üì¶ Erreur MongoDB, retour liste vide');
    return NextResponse.json([]);
  }
}

export async function POST(request: NextRequest) {
  try {
    console.log('üîç API POST /categories - Ajout MongoDB');
    const categoryData = await request.json();
    
    if (!categoryData.label || !categoryData.value) {
      return NextResponse.json(
        { error: 'Le label et la valeur sont requis' },
        { status: 400 }
      );
    }

    await mongoService.connect();
    const newCategory = await mongoService.saveCategory(categoryData);
    
    console.log('‚úÖ Cat√©gorie ajout√©e:', newCategory);
    return NextResponse.json(newCategory);
  } catch (error) {
    console.error('‚ùå Erreur ajout cat√©gorie:', error);
    return NextResponse.json(
      { error: '√âchec de l\'ajout de la cat√©gorie' },
      { status: 500 }
    );
  }
}

export async function PUT(request: NextRequest) {
  try {
    console.log('üîç API PUT /categories - Mise √† jour MongoDB');
    const { id, ...updateData } = await request.json();
    
    if (!id) {
      return NextResponse.json(
        { error: 'ID de cat√©gorie requis' },
        { status: 400 }
      );
    }

    await mongoService.connect();
    const updatedCategory = await mongoService.updateCategory(id, updateData);
    
    if (!updatedCategory) {
      return NextResponse.json(
        { error: 'Cat√©gorie non trouv√©e' },
        { status: 404 }
      );
    }
    
    console.log('‚úÖ Cat√©gorie mise √† jour:', updatedCategory);
    return NextResponse.json(updatedCategory);
  } catch (error) {
    console.error('‚ùå Erreur mise √† jour cat√©gorie:', error);
    return NextResponse.json(
      { error: '√âchec de la mise √† jour de la cat√©gorie' },
      { status: 500 }
    );
  }
}

export async function DELETE(request: NextRequest) {
  try {
    console.log('üîç API DELETE /categories - Suppression MongoDB');
    const { searchParams } = new URL(request.url);
    const id = searchParams.get('id');
    
    if (!id) {
      return NextResponse.json(
        { error: 'ID de cat√©gorie requis' },
        { status: 400 }
      );
    }

    await mongoService.connect();
    const success = await mongoService.deleteCategory(id);
    
    if (!success) {
      return NextResponse.json(
        { error: 'Cat√©gorie non trouv√©e' },
        { status: 404 }
      );
    }
    
    console.log('‚úÖ Cat√©gorie supprim√©e:', id);
    return NextResponse.json({ success: true, message: 'Cat√©gorie supprim√©e' });
  } catch (error) {
    console.error('‚ùå Erreur suppression cat√©gorie:', error);
    return NextResponse.json(
      { error: '√âchec de la suppression de la cat√©gorie' },
      { status: 500 }
    );
  }
}