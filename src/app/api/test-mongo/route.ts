import { NextResponse } from 'next/server';
import mongoService from '@/services/mongoService';

export async function GET() {
  try {
    console.log('üß™ Test de connexion MongoDB d√©marr√©...');
    
    // Tester la connexion
    await mongoService.connect();
    
    console.log('‚úÖ Connexion MongoDB r√©ussie !');
    
    // Tester une op√©ration simple
    const testResult = await mongoService.getProducts();
    
    return NextResponse.json({
      status: 'SUCCESS',
      message: 'Connexion MongoDB r√©ussie !',
      details: {
        connected: mongoService.isConnected,
        timestamp: new Date().toISOString(),
        productsCount: testResult.length,
        mongoUri: process.env.MONGODB_URI ? 'D√©finie via variable d\'environnement' : 'Utilise URI par d√©faut',
        testOperation: 'Lecture des produits r√©ussie'
      }
    });
    
  } catch (error: any) {
    console.error('‚ùå Test MongoDB √©chou√©:', error);
    
    // Analyser le type d'erreur
    let errorType = 'UNKNOWN';
    let suggestion = 'V√©rifier les logs pour plus de d√©tails';
    
    if (error.message?.includes('authentication failed')) {
      errorType = 'AUTHENTICATION_FAILED';
      suggestion = 'V√©rifier que l\'utilisateur Junior existe dans MongoDB Atlas avec le bon mot de passe';
    } else if (error.message?.includes('ENOTFOUND')) {
      errorType = 'DNS_RESOLUTION_FAILED';
      suggestion = 'V√©rifier l\'URI MongoDB et la connectivit√© r√©seau';
    } else if (error.message?.includes('connection refused')) {
      errorType = 'CONNECTION_REFUSED';
      suggestion = 'V√©rifier que le cluster MongoDB Atlas est actif';
    } else if (error.message?.includes('timeout')) {
      errorType = 'TIMEOUT';
      suggestion = 'Probl√®me de r√©seau ou cluster surcharg√©';
    }
    
    return NextResponse.json({
      status: 'ERROR',
      message: '√âchec de connexion MongoDB',
      errorType,
      suggestion,
      details: {
        errorMessage: error.message,
        errorCode: error.code,
        errorCodeName: error.codeName,
        mongoUri: process.env.MONGODB_URI ? 'Variable d\'environnement d√©finie' : 'Utilise URI par d√©faut',
        timestamp: new Date().toISOString()
      }
    }, { status: 500 });
  }
}

// Route POST pour tester avec une URI personnalis√©e
export async function POST(request: Request) {
  try {
    const { testUri } = await request.json();
    
    if (!testUri) {
      return NextResponse.json({
        status: 'ERROR',
        message: 'URI de test requise'
      }, { status: 400 });
    }
    
    console.log('üß™ Test avec URI personnalis√©e...');
    
    // Import dynamique pour tester avec une URI sp√©cifique
    const { MongoClient } = require('mongodb');
    
    const client = new MongoClient(testUri, {
      maxPoolSize: 10,
      serverSelectionTimeoutMS: 5000,
      connectTimeoutMS: 10000,
    });
    
    await client.connect();
    console.log('‚úÖ Connexion test r√©ussie !');
    
    // Test simple
    const db = client.db();
    const collections = await db.listCollections().toArray();
    
    await client.close();
    
    return NextResponse.json({
      status: 'SUCCESS',
      message: 'Test URI personnalis√©e r√©ussi !',
      details: {
        collectionsFound: collections.length,
        collectionNames: collections.map(c => c.name),
        timestamp: new Date().toISOString()
      }
    });
    
  } catch (error: any) {
    console.error('‚ùå Test URI personnalis√©e √©chou√©:', error);
    
    return NextResponse.json({
      status: 'ERROR',
      message: '√âchec test URI personnalis√©e',
      details: {
        errorMessage: error.message,
        errorCode: error.code,
        timestamp: new Date().toISOString()
      }
    }, { status: 500 });
  }
}